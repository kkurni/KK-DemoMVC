/* ==========================================================================
Grid
========================================================================== */

/**
* Recommended uses:
*
* <div class="grid">
*   <div class="grid__cell unit-1of3"></div>
*   <div class="grid__cell unit-1of3"></div>
*   <div class="grid__cell unit-1of3"></div>
* </div>
*
* <div class="grid grid--center">
*   <div class="grid__cell unit-1of3"></div>
*   <div class="grid__cell unit-1of3"></div>
* </div>
*/

/* Grid core
========================================================================== */

/**
* Grid container
* Must only contain `.grid` or `.grid__cell` components as children.
*/

.grid {
    display: block;
    padding: 0;
    margin: 0 3%;
    /* Ensure consistent default alignment */
    text-align: left;
    /* Remove inter-unit whitespace for all non-monospace font-families
    * If you're using a monospace base font, you will need to set the `grid`
    * font-family to `sans-serif` and then redeclare the monospace font on
    * the `grid__cell` objects.
    */
    letter-spacing: -0.31em;
    /* Protect against WebKit bug with optimizelegibility */
    xtext-rendering: optimizespeed;
}

/* Opera hack */

.opera:-o-prefocus,
.grid {
    word-spacing: -0.43em; /* 2 */
}

/*
* Child `grid` object adjustments
* Used for more complex fixed-fluid hybrid grids
*/

.grid > .grid {
    overflow: hidden;
    margin-right: 0;
    margin-left: 0;
}

/* -------------------------------------------------------------------------- */

/**
 * Overflow inner content utility
 * When a parent container shrinks have the inner container keep wider width
 * so content doesn't squish
 */
.grid--push-boundary {
    min-width: 300px;
}

/**
 * Allow inner contents to spread to available width
 * Using text-align: justify we can make elements evenly spread
 * to containers width, it needs pseudo element to do this.
 * 1. justify will push content to fit nicely
 * 2. So as not to get weird spacing gaps reset parent font-size to 0
 */
.grid--justify {
    text-align: justify; /* 1 */
    font-size: 0; /* 2 */
}
.grid--justify:after {
    content: '';
    display: inline-block;
    width: 100%;
}

/*
* Child `grid` modifier
* Used for applying negative margin to pull out into gutters
*/

.grid > .grid--pullout {
    margin-right: -3%;
    margin-left: -3%;
}

/*
* Grid units
* No explicit width by default. Apply `.unit-x-y` classes.
*/

.grid__cell {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    width: 100%;
    display: inline-block;
    margin: 0;
    padding: 0 4% 0 0;
    /* Controls vertical positioning of units */
    vertical-align: top;
    /* Keeps unit content correctly aligned */
    text-align: left;
    /* Reset text defaults */
    letter-spacing: normal;
    word-spacing: normal;
    text-rendering: auto;
}
/*
* Adjust first grid unit to have left padding too
*/
.grid__cell:first-of-type,
.grid__cell:first-child,
.grid__cell--first-child {
    padding-left: 4%;
    padding-right: 4%;
}

.grid__cell--pushin {
    margin: 0 3%;
}

/*
* Modifier: horizontally center all grid units
* Allows for automatic unit centering irrespective of the number of
* units in the grid.
*/

.grid--center {
    text-align: center;
}

/*
* Modifier: horizontally center one unit
* Set a specific unit to be horizontally centered. Doesn't affect
* any other units. Can still contain a child `grid` object.
*/

.grid__cell--center {
    display: block;
    margin: 0 auto;
}

/* Proportional units
========================================================================== */

/**
* Specify the proportional width of an object.
* Primarily for, but not limited to, use with `.grid__cell` components.
* Intentional redundancy build into each set of unit classes.
* Supports: 3 part grids
*/

.unit-1of3 {
    width: 32.0%;
}

.unit-2of3 {
    width: 65%;
}

.unit-1of2 {
    width: 48%;
}
